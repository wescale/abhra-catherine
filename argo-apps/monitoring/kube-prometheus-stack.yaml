
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: kube-prometheus-stack-as
  namespace: cd-tools
spec:
  generators:
  - clusters: {}
  template:
    metadata:
      name: kube-prometheus-stack
    spec:
      project: tools
      source:
        chart: kube-prometheus-stack
        repoURL: https://prometheus-community.github.io/helm-charts
        targetRevision: 45.7.1
        helm:
          releaseName: abhra
          skipCrds: true
          values: |
            grafana:
              sidecar:
                logLevel: DEBUG  
                datasources:
                  enabled: true
                  label: grafana_datasource
                  labelValue: ""
                  searchNamespace: ALL
                  watchMethod: WATCH
                  resource: both
                  reloadURL: "http://localhost:3000/api/admin/provisioning/datasources/reload"
                  skipReload: false
                dashboards:
                  enabled: true
                  SCProvider: true
                  label: grafana_dashboard
                  labelValue: ""
                  folder: /tmp/dashboards
                  searchNamespace: ALL
                  watchMethod: WATCH
                  watchServerTimeout: 60
                  watchClientTimeout: 60
                  provider:
                    name: sidecarProvider
                    orgid: 1
                    folder: ''
                    type: file
                    disableDelete: true
                    allowUiUpdates: true
                    foldersFromFilesStructure: false
                plugins:
                  enabled: false
                  label: grafana_plugin
                  labelValue: ""
                  searchNamespace: ALL
                  watchMethod: WATCH
                  resource: both
                  reloadURL: "http://localhost:3000/api/admin/provisioning/plugins/reload"
                  skipReload: false
                  initPlugins: false
              envFromSecrets: 
                - name: google-secret-for-grafana
                - name: redis-secret
              plugins:
              - redis-datasource
              grafana.ini:
                server:
                  root_url: https://grafana.{{metadata.labels.abhra.shambhala/url-base-path}}
                auth.google:
                  enabled: true
                  client_id: TO_BE_REPLACED
                  client_secret: TO_BE_REPLACED
                  scopes: https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
                  auth_url: https://accounts.google.com/o/oauth2/auth
                  token_url: https://accounts.google.com/o/oauth2/token
                  allowed_domains: wescale.fr
                  allow_sign_up: true
              # additionalDataSources:
              #   - name: Redis
              #     type: redis-datasource
              #     access: proxy
              #     editable: true
              #     url: redis://guru-redis-master.guru.svc:6379
              #     isDefault: false
              #     secureJsonData:
              #       password: ${REDIS_PASSWORD}
              ingress:
                  enabled: true
                  ingressClassName: nginx
                  annotations:
                    cert-manager.io/cluster-issuer: 'letsencrypt-{{metadata.labels.abhra.shambhala/environment-type}}'
                    kubernetes.io/tls-acme: 'true'
                  hosts: 
                    - grafana.{{metadata.labels.abhra.shambhala/url-base-path}}
                  path: /
                  pathType: Prefix
                  tls: 
                    - secretName: grafana-server-cert
                      hosts:
                        - grafana.{{metadata.labels.abhra.shambhala/url-base-path}}
            prometheus:
              ingress:
                  enabled: true
                  ingressClassName: nginx
                  annotations:
                    cert-manager.io/cluster-issuer: 'letsencrypt-{{metadata.labels.abhra.shambhala/environment-type}}'
                    kubernetes.io/tls-acme: 'true'
                  hosts: 
                    - prometheus.{{metadata.labels.abhra.shambhala/url-base-path}}
                  path: /
                  pathType: Prefix
                  tls: 
                    - secretName: prometheus-server-cert
                      hosts:
                        - prometheus.{{metadata.labels.abhra.shambhala/url-base-path}}

      destination:
        namespace: cluster-tools
        server: https://kubernetes.default.svc
      syncPolicy:
        automated:
          selfHeal: true
          prune: true
        syncOptions:
        - CreateNamespace=true
